# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Company {
  _id: ID!
  owner: User!
  name: String!
  address: String
  phoneNumber: String
  website: String
  createdAt: String!
  updatedAt: String!
}

type User {
  _id: ID!
  firstName: String!
  lastName: String!
  userName: String!
  email: String!
  profilePhoto: String
  roles: [UserRole!]!
  isDeleted: Boolean!
  deletedAt: String
  createdAt: String!
  updatedAt: String!
  status: String!
  company: Company
  isCompanyAdmin: Boolean!
}

"""User roles"""
enum UserRole {
  ADMIN
  WORKER
  EXECUTIVE
  USER
}

type RegisterUserObject {
  activationToken: String!
}

type LoginUserObject {
  user: User
  access_token: String!
  refresh_token: String!
}

type ChangeUserStatusObject {
  userId: ID!
  status: String!
}

type SearchUsersObject {
  users: [User!]!
  totalCount: Float!
}

type GetUserProfileObject {
  _id: ID!
  firstName: String!
  lastName: String!
  userName: String!
  email: String!
  profilePhoto: String
  roles: [UserRole!]!
  isDeleted: Boolean!
  deletedAt: String
  createdAt: String!
  updatedAt: String!
  status: String!
  company: Company
  isCompanyAdmin: Boolean!
  chatId: String
}

type CompanyJoinRequest {
  _id: ID!
  user: User!
  company: Company!
  status: JoinRequestStatus!
  createdAt: String!
  updatedAt: String!
}

"""Status of the company join request"""
enum JoinRequestStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELED
}

type CompanyRequest {
  _id: ID!
  user: User!
  name: String!
  address: String
  phoneNumber: String
  website: String
  description: String!
  status: CompanyRequestStatus!
  rejectionReason: String
  createdAt: String!
  updatedAt: String!
}

"""Status of the company  request"""
enum CompanyRequestStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELED
}

type CompanyWithButton {
  company: Company!
  showCompanyjoinButton: Boolean!
  isJoinRequest: Boolean
  isCompanyEmploye: Boolean!
}

type SearchCompaniesObject {
  companies: [Company!]!
  totalCount: Float!
}

type ProjectMember {
  _id: ID!
  firstName: String!
  lastName: String!
  userName: String!
  email: String!
  profilePhoto: String
  roles: [UserRole!]!
  isDeleted: Boolean!
  deletedAt: String
  createdAt: String!
  updatedAt: String!
  status: String!
  company: Company
  isCompanyAdmin: Boolean!
  belongsToCompany: Boolean!
}

type Project {
  _id: ID!
  name: String!
  description: String
  company: Company!
  projectManager: ProjectMember!
  createdByUser: User!
  team: [ProjectMember!]!
  startDate: String!
  endDate: String!
  status: ProjectStatus!
  createdAt: String!
  updatedAt: String!
  tasks: [Task!]!
  taskSummary: TaskSummary!
}

"""Project statuses"""
enum ProjectStatus {
  ACTIVE
  COMPLETED
  ENDED
  CANCELLED
}

type Task {
  _id: ID!
  title: String!
  description: String
  project: Project!
  assignee: User!
  parentTask: Task
  createdByUser: User!
  subTasks: [Task!]
  status: TaskStatus!
  priority: TaskPriority!
  dueDate: String!
  completedAt: String
  createdAt: String!
  updatedAt: String!
}

"""Task statuses"""
enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

"""Task priorities"""
enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

type Notification {
  _id: ID!
  recipients: [User!]!
  sender: User!
  type: NotificationType!
  content: Content
  contentType: String!
  message: String!
  isRead: Boolean!
}

"""Type of notification content"""
enum NotificationType {
  TASK
  PROJECT
  COMPANY
  VIDEO_CALL
  DIRECT_MESSAGE
}

union Content = Project | Task | Company | User

type TaskSummary {
  totalTasks: Int!
  todoTasks: Int!
  in_progressTasks: Int!
  doneTasks: Int!
  reviewTasks: Int!
}

type GetAllTasksByProjectObject {
  tasks: [Task!]!
  project: Project!
}

type MediaContent {
  _id: ID!
  type: MediaType!
  url: String!
  thumbnail: String
  duration: Float
  size: Float
  mimeType: String
  fileName: String
  createdAt: String!
  updatedAt: String!
}

"""Medya dosya tipleri"""
enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

type Message {
  _id: ID!
  sender: User!
  chat: Chat!
  type: MessageType!
  content: String
  media: MediaContent
  isRead: [User!]!
  createdAt: String!
  updatedAt: String!
  isDeleted: Boolean!
  deletedAt: String
}

"""Mesaj i√ßerik tipleri"""
enum MessageType {
  TEXT
  MEDIA
}

type ChatMetadata {
  createdAt: DateTime!
  lastActivity: DateTime!
  participantCount: Float!
  type: MetadataType!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""Chat Metadata Type"""
enum MetadataType {
  DIRECT
  GROUP
}

type Chat {
  _id: ID!
  participants: [User!]!
  admins: [User!]!
  messages: [Message!]!
  chatName: String
  isDeleted: Boolean!
  createdByUser: User!
  deletedAt: String
  metadata: ChatMetadata!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type GetUserChatsObject {
  _id: ID!
  participants: [User!]!
  chatName: String
  lastMessage: Message
  isAdmin: Boolean!
}

type SignUrlOutput {
  signature: String!
  timestamp: Float!
  cloudName: String!
  apiKey: String!
}

type ChatMessages {
  _id: ID!
  content: String
  type: MessageType!
  sender: User!
  media: MediaContent
  messageIsReaded: Boolean!
}

type ChatParticipantObject {
  _id: ID!
  status: String
  isAdmin: Boolean!
  userName: String!
  profilePhoto: String
}

type GetChatUsersObject {
  _id: ID!
  participants: [ChatParticipantObject!]!
}

type VideoCallNotificationObject {
  chatId: String!
  participants: [String!]!
  userName: String!
}

type GetChatMessagesObject {
  messages: [ChatMessages!]!
  totalMessages: Float!
  totalPages: Float!
  currentPage: Float!
}

type Query {
  getMe: User!
  rolecheck: String!
  getCompanyUsers: [User!]!
  searchUsers(input: SearchUsersInput!): SearchUsersObject!
  getUserProfile(userId: String!): GetUserProfileObject!
  getCompany(companyId: String!): Company!
  getCompanyByUser(companyId: String): CompanyWithButton!
  getCompanyJoinRequests(companyId: String, status: JoinRequestStatus!): [CompanyJoinRequest!]!
  getCompanyEmployees(companyId: String): [User!]!
  searchCompanies(input: SearchCompaniesInput!): SearchCompaniesObject!
  getCompanyRequests(status: CompanyRequestStatus!): [CompanyRequest!]!
  getMyCompanyMembershipRequests(status: JoinRequestStatus!): [CompanyJoinRequest!]!
  getAllProjectsByCompany: [Project!]!
  getProjectsByCompany: [Project!]!
  getProjectWithDetails(projectId: String!): Project!
  getTask(taskId: String!): Task!
  getAllTasksByProject(projectId: String!): GetAllTasksByProjectObject!
  getAllMyTasks: [Task!]!
  getNotifications: [Notification!]!
  getChats: [GetUserChatsObject!]!
  getChatUsers(chatId: String!): GetChatUsersObject!
  getChatMessages(input: GetChatMessagesInput!): GetChatMessagesObject!
  getMessageReaders(messageId: String!): Message!
}

input SearchUsersInput {
  searchText: String!
  page: Float! = 1
  limit: Float! = 10
}

input SearchCompaniesInput {
  searchText: String!
  page: Float! = 1
  limit: Float! = 10
}

input GetChatMessagesInput {
  chatId: String!
  page: Float!
  limit: Float!
  extraPassValue: Float
}

type Mutation {
  registerUser(input: RegisterUserInput!): RegisterUserObject!
  activationUser(input: ActivationUserInput!): User!
  loginUser(input: LoginUserInput!): LoginUserObject!
  logout: String!
  forgotPassword(email: String!): String!
  resetPassword(input: ResetPasswordInput!): String!
  updateUser(input: UpdateUserInput!): User!
  updateUserStatus(status: String!): Boolean!
  uploadProfilePhoto(profilePhoto: String!): User!
  createCompany(input: CreateCompanyInput!): Company!
  requestToJoinCompany(companyId: String!): CompanyJoinRequest!
  cancelJoinCompanyRequest(companyId: String!): CompanyJoinRequest!
  respondToJoinRequest(requestId: String!, approve: Boolean!): CompanyJoinRequest!
  promoteToExecutive(companyId: String, userId: String!): User!
  demoteFromExecutive(companyId: String, userId: String!): User!
  removeEmployee(userId: String!): User!
  createCompanyRequest(input: CreateCompanyRequestInput!): CompanyRequest!
  rejectCompanyRequest(requestId: String!, reason: String): CompanyRequest!
  approveCompanyRequest(requestId: String!): Company!
  createProject(input: CreateProjectInput!): Project!
  createTask(input: CreateTaskInput!): Task!
  updateTaskHierarchy(input: UpdateTaskHierarchyInput!): Task!
  removeParentTask(taskId: String!): String!
  updateTaskStatus(input: UpdateTaskStatusInput!): String!
  updateTask(input: UpdateTaskInput!): Task!
  markNotificationAsRead(notificationId: String!): String!
  createChat(input: CreateChatInput!): Chat!
  generateSignedUploadUrl(input: SignUrlInput!): SignUrlOutput!
  leaveChat(chatId: String!): String!
  addChatAdmin(chatId: String!, userId: String!): Chat!
  removeChatAdmin(chatId: String!, userId: String!): Chat!
  removeChatParticipant(chatId: String!, userId: String!): Chat!
  addChatParticipant(chatId: String!, userId: String!): Chat!
  updateChatName(chatId: String!, name: String!): Chat!
  freezeChat(chatId: String!): Chat!
  joinVideoRoom(chatId: String!): String!
  startVideoCall(chatId: String!): Boolean!
  addMessageToChat(input: CreateMessageInput!): Message!
  markMessagesAsRead(messageIds: [String!]!): Boolean!
  markChatMessagesAsRead(chatId: String!): Boolean!
}

input RegisterUserInput {
  firstName: String!
  lastName: String!
  email: String!
  userName: String!
  password: String!
  roles: [UserRole!]! = [USER]
}

input ActivationUserInput {
  activationToken: String!
  activationCode: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

input ResetPasswordInput {
  token: String!
  password: String!
}

input UpdateUserInput {
  _id: ID!
  firstName: String
  lastName: String
  userName: String
  email: String
  profilePhoto: String
  roles: [UserRole!]
  status: String
  company: ID
  isCompanyAdmin: Boolean
}

input CreateCompanyInput {
  name: String!
  address: String
  phoneNumber: String
  website: String
}

input CreateCompanyRequestInput {
  name: String!
  address: String
  phoneNumber: String
  website: String
  description: String!
}

input CreateProjectInput {
  name: String!
  description: String
  projectManagerId: String!
  teamMemberIds: [String!]!
  startDate: String!
  endDate: String!
}

input CreateTaskInput {
  title: String!
  description: String
  projectId: String!
  assigneeId: String!
  status: TaskStatus!
  priority: TaskPriority!
  dueDate: String!
}

input UpdateTaskHierarchyInput {
  taskId: ID!
  parentTaskId: ID!
}

input UpdateTaskStatusInput {
  taskId: ID!
  status: TaskStatus!
}

input UpdateTaskInput {
  taskId: ID!
  title: String
  description: String
  assignee: String
  status: TaskStatus
  priority: TaskPriority
  dueDate: String
}

input CreateChatInput {
  participants: [String!]!
  chatName: String
}

input SignUrlInput {
  publicId: String!
  folder: String!
}

input CreateMessageInput {
  chatId: String!
  type: MessageType!
  content: String
  mediaContent: MediaContentInput
}

input MediaContentInput {
  url: String!
  type: MediaType!
  thumbnail: String
  duration: Float
  size: Float
  mimeType: String
}

type Subscription {
  changeUserStatus(userId: String!): ChangeUserStatusObject!
  changeUserRole: User!
  createCompanyProject(companyId: String!): Project!
  newNotification: Notification!
  addMessageToChat(chatId: String!): ChatMessages!
  videoCallStarted(userId: String!): VideoCallNotificationObject!
}